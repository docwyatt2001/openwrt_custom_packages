--- a/Makefile
+++ b/Makefile
@@ -5,6 +5,18 @@ $(info ${VERSION})
 # really Basic Makefile for Skydive
 export GO15VENDOREXPERIMENT=1
 
+ifneq ($(PKG_GO_CROSS_COMPILE),)
+  GOARCH_COMPILE:=$(GOARCH)
+else
+  GOARCH_COMPILE=$(GOHOSTARCH)
+endif
+
+ifneq ($(PKG_USE_GO_BUILD_PATH),)
+  OPENWRT_BUILD_PATH:=$(GOPATH)/src/github.com/skydive-project/skydive
+else
+  OPENWRT_BUILD_PATH:=.
+endif
+
 FLOW_PROTO_FILES=flow/flow.proto flow/set.proto flow/request.proto
 FILTERS_PROTO_FILES=filters/filters.proto
 VERBOSE_FLAGS?=-v
@@ -17,7 +29,7 @@ ifeq ($(COVERAGE), true)
 endif
 TIMEOUT?=1m
 TEST_PATTERN?=
-UT_PACKAGES?=$(shell ${GOPATH}/bin/govendor list -no-status +local | grep -v '/tests')
+UT_PACKAGES?=$(shell cd $(OPENWRT_BUILD_PATH) && ${GOPATH}/bin/govendor list -no-status +local | grep -v '/tests')
 FUNC_TESTS_CMD:="grep -e 'func Test${TEST_PATTERN}' tests/*.go | perl -pe 's|.*func (.*?)\(.*|\1|g' | shuf"
 FUNC_TESTS:=$(shell sh -c $(FUNC_TESTS_CMD))
 DOCKER_IMAGE?=skydive/skydive
@@ -36,96 +48,97 @@ endif
 all: install
 
 .proto: builddep ${FLOW_PROTO_FILES} ${FILTERS_PROTO_FILES}
-	protoc --go_out . ${FLOW_PROTO_FILES}
-	protoc --go_out . ${FILTERS_PROTO_FILES}
+	(cd $(OPENWRT_BUILD_PATH) && protoc --plugin=protoc-gen-go=$(GOPATH)/bin/protoc-gen-go --go_out . ${FLOW_PROTO_FILES})
+	(cd $(OPENWRT_BUILD_PATH) && protoc --plugin=protoc-gen-go=$(GOPATH)/bin/protoc-gen-go --go_out . ${FILTERS_PROTO_FILES})
 	# always export flow.ParentUUID as we need to store this information to know
 	# if it's a Outer or Inner packet.
-	sed -e 's/ParentUUID\(.*\),omitempty\(.*\)/ParentUUID\1\2/' -e 's/int64\(.*\),omitempty\(.*\)/int64\1\2/' -i flow/flow.pb.go
+	(cd $(OPENWRT_BUILD_PATH) && sed -e 's/ParentUUID\(.*\),omitempty\(.*\)/ParentUUID\1\2/' -e 's/int64\(.*\),omitempty\(.*\)/int64\1\2/' -i flow/flow.pb.go)
 	# do not export LastRawPackets used internally
-	sed -e 's/json:"LastRawPackets,omitempty"/json:"-"/g' -i flow/flow.pb.go
+	(cd $(OPENWRT_BUILD_PATH) && sed -e 's/json:"LastRawPackets,omitempty"/json:"-"/g' -i flow/flow.pb.go)
 	# add flowState to flow generated struct
-	sed -e 's/type Flow struct {/type Flow struct {\n\tXXX_state flowState `json:"-"`/' -i flow/flow.pb.go
+	(cd $(OPENWRT_BUILD_PATH) && sed -e 's/type Flow struct {/type Flow struct {\n\tXXX_state flowState `json:"-"`/' -i flow/flow.pb.go)
 
 .bindata: builddep
-	go-bindata ${GO_BINDATA_FLAGS} -nometadata -o statics/bindata.go -pkg=statics -ignore=bindata.go statics/* statics/css/images/* statics/js/vendor/* statics/js/components/*
-	gofmt -w -s statics/bindata.go
+	(cd $(OPENWRT_BUILD_PATH) && $(GOPATH)/bin/go-bindata ${GO_BINDATA_FLAGS} -nometadata -o statics/bindata.go -pkg=statics -ignore=bindata.go statics/* statics/css/images/* statics/js/vendor/* statics/js/components/*)
+	(cd $(OPENWRT_BUILD_PATH) && gofmt -w -s statics/bindata.go)
 
 .compile:
-	${GOPATH}/bin/govendor install -ldflags="-X github.com/skydive-project/skydive/version.Version=${VERSION}" ${GOFLAGS} ${GOTAGS} ${VERBOSE_FLAGS} +local
+	(cd $(OPENWRT_BUILD_PATH) && ${GOPATH}/bin/govendor install -ldflags="-X github.com/skydive-project/skydive/version.Version=${VERSION}" ${GOFLAGS} ${GOTAGS} ${VERBOSE_FLAGS} +local)
 
 install: govendor genlocalfiles dpdk.build contribs .compile
 
 build: govendor genlocalfiles dpdk.build contribs
-	${GOPATH}/bin/govendor build -ldflags="-X github.com/skydive-project/skydive/version.Version=${VERSION}" ${GOFLAGS} ${GOTAGS} ${VERBOSE_FLAGS} +local
+	(cd $(OPENWRT_BUILD_PATH) && ${GOPATH}/bin/govendor build -ldflags="-X github.com/skydive-project/skydive/version.Version=${VERSION}" ${GOFLAGS} ${GOTAGS} ${VERBOSE_FLAGS} +local)
 
 static: govendor genlocalfiles
-	rm -f $$GOPATH/bin/skydive
+	rm -f $$GOPATH/bin/skydive $$OPENWRT_BUILD_PATH/bin/skydive
 	test -f /etc/redhat-release && govendor install -tags netgo --ldflags '-extldflags "-static /usr/lib64/libz.a /usr/lib64/liblzma.a /usr/lib64/libm.a"' ${VERBOSE_FLAGS} +local || true
 	test -f /etc/debian_version && govendor install -tags netgo --ldflags '-extldflags "-static /usr/lib/x86_64-linux-gnu/libz.a /usr/lib/x86_64-linux-gnu/liblzma.a /usr/lib/x86_64-linux-gnu/libicuuc.a /usr/lib/x86_64-linux-gnu/libicudata.a /usr/lib/x86_64-linux-gnu/libxml2.a /usr/lib/x86_64-linux-gnu/libc.a /usr/lib/x86_64-linux-gnu/libdl.a /usr/lib/x86_64-linux-gnu/libpthread.a /usr/lib/x86_64-linux-gnu/libc++.a /usr/lib/x86_64-linux-gnu/libm.a"' ${VERBOSE_FLAGS} +local || true
 
 contribs:
-	$(MAKE) -C contrib/snort
+	$(MAKE) -C $(OPENWRT_BUILD_PATH)/contrib/snort
 
 dpdk.build:
 ifeq ($(WITH_DPDK), true)
-	$(MAKE) -C dpdk
+	$(MAKE) -C $(OPENWRT_BUILD_PATH)/dpdk
 endif
 
 dpdk.cleanup:
-	$(MAKE) -C dpdk clean
+	$(MAKE) -C $(OPENWRT_BUILD_PATH)/dpdk clean
 
 test.functionals.cleanup:
-	rm -f tests/functionals
+	rm -f $(OPENWRT_BUILD_PATH)/tests/functionals
 
 test.functionals.compile: govendor genlocalfiles
-	${GOPATH}/bin/govendor test -tags "${TAGS} test" ${GOFLAGS} ${VERBOSE_FLAGS} -timeout ${TIMEOUT} -c -o tests/functionals ./tests/
+	(cd $(OPENWRT_BUILD_PATH) && ${GOPATH}/bin/govendor test -tags "${TAGS} test" ${GOFLAGS} ${VERBOSE_FLAGS} -timeout ${TIMEOUT} -c -o tests/functionals ./tests/)
 
 test.functionals.run:
 ifneq ($(VERBOSE_FLAGS),)
-	cd tests && sudo -E ./functionals -test.v -test.timeout ${TIMEOUT} ${ARGS}
+	(cd $(OPENWRT_BUILD_PATH) && cd tests && sudo -E ./functionals -test.v -test.timeout ${TIMEOUT} ${ARGS})
 else
-	cd tests && sudo -E ./functionals -test.timeout ${TIMEOUT} ${ARGS}
+	(cd $(OPENWRT_BUILD_PATH) && cd tests && sudo -E ./functionals -test.timeout ${TIMEOUT} ${ARGS})
 endif
 
 test.functionals.all: test.functionals.compile
-	$(MAKE) TIMEOUT="8m" ARGS=${ARGS} test.functionals.run
+	(cd $(OPENWRT_BUILD_PATH) && $(MAKE) TIMEOUT="8m" ARGS=${ARGS} test.functionals.run)
 
 test.functionals.batch: test.functionals.compile
 ifneq ($(TEST_PATTERN),)
-	set -e ; $(MAKE) ARGS="${ARGS} -test.run ${TEST_PATTERN}" test.functionals.run
+	(cd $(OPENWRT_BUILD_PATH) && set -e ; $(MAKE) ARGS="${ARGS} -test.run ${TEST_PATTERN}" test.functionals.run)
 else
-	set -e ; $(MAKE) ARGS="${ARGS}" test.functionals.run
+	(cd $(OPENWRT_BUILD_PATH) && set -e ; $(MAKE) ARGS="${ARGS}" test.functionals.run)
 endif
 
 test.functionals: test.functionals.compile
+	(cd $(OPENWRT_BUILD_PATH) && \
 	for functest in ${FUNC_TESTS} ; do \
 		$(MAKE) ARGS="-test.run $$functest$$\$$ ${ARGS} ${COVERAGE_ARGS}" test.functionals.run; \
-	done
+	done)
 
 functional:
-	$(MAKE) test.functionals VERBOSE=true TIMEOUT=10m ARGS='-standalone'
+	(cd $(OPENWRT_BUILD_PATH) && $(MAKE) test.functionals VERBOSE=true TIMEOUT=10m ARGS='-standalone')
 
 test: govendor genlocalfiles
 ifeq ($(COVERAGE), true)
-	set -v ; \
+	(cd $(OPENWRT_BUILD_PATH) && set -v ; \
 	go get github.com/mattn/goveralls ; \
 	for pkg in ${UT_PACKAGES}; do \
 		if [ -n "$$pkg" ]; then \
 			coverfile="${COVERAGE_WD}/$$(echo $$pkg | tr / -).cover"; \
-			${GOPATH}/bin/govendor test -tags "${TAGS} test" -covermode=${COVERAGE_MODE} -coverprofile="$$coverfile" ${VERBOSE_FLAGS} -timeout ${TIMEOUT} $$pkg; \
+			(cd $(OPENWRT_BUILD_PATH) && ${GOPATH}/bin/govendor test -tags "${TAGS} test" -covermode=${COVERAGE_MODE} -coverprofile="$$coverfile" ${VERBOSE_FLAGS} -timeout ${TIMEOUT} $$pkg); \
 		fi; \
-	done
+	done)
 else
-	set -v ; \
-	${GOPATH}/bin/govendor test -tags "${TAGS} test" ${GOFLAGS} ${VERBOSE_FLAGS} -timeout ${TIMEOUT} ${UT_PACKAGES}
+	(cd $(OPENWRT_BUILD_PATH) && set -v ; \
+	${GOPATH}/bin/govendor test -tags "${TAGS} test" ${GOFLAGS} ${VERBOSE_FLAGS} -timeout ${TIMEOUT} ${UT_PACKAGES})
 endif
 
 govendor:
-	go get github.com/kardianos/govendor
-	${GOPATH}/bin/govendor sync
-	patch -p0 < dpdk/dpdk.govendor.patch
-	patch -p0 < patches/boltdb.govendor.patch
-	patch -p0 < patches/netns.govendor.patch
+	GOARCH=$(GOHOSTARCH) go get github.com/kardianos/govendor
+	(cd $(OPENWRT_BUILD_PATH) && ${GOPATH}/bin/govendor sync)
+	(cd $(OPENWRT_BUILD_PATH) && patch -p0 < dpdk/dpdk.govendor.patch)
+	(cd $(OPENWRT_BUILD_PATH) && patch -p0 < patches/boltdb.govendor.patch)
+	(cd $(OPENWRT_BUILD_PATH) && patch -p0 < patches/netns.govendor.patch)
 
 fmt: govendor genlocalfiles
 	@echo "+ $@"
@@ -134,10 +147,10 @@ fmt: govendor genlocalfiles
 
 vet: govendor
 	@echo "+ $@"
-	test -z "$$(${GOPATH}/bin/govendor tool vet $$(${GOPATH}/bin/govendor list -no-status +local | perl -pe 's|github.com/skydive-project/skydive/?||g' | grep -v '^tests') 2>&1 | tee /dev/stderr | grep -v '^flow/probes/afpacket/' | grep -v 'exit status 1')"
+	test -z "$$( cd $(OPENWRT_BUILD_PATH) && ${GOPATH}/bin/govendor tool vet $$(${GOPATH}/bin/govendor list -no-status +local | perl -pe 's|github.com/skydive-project/skydive/?||g' | grep -v '^tests') 2>&1 | tee /dev/stderr | grep -v '^flow/probes/afpacket/' | grep -v 'exit status 1')"
 
 check: govendor
-	@test -z "$$(${GOPATH}/bin/govendor list +u)" || \
+	@test -z "$$( cd $(OPENWRT_BUILD_PATH) && ${GOPATH}/bin/govendor list +u)" || \
 		(echo -e "You must remove these unused packages:\n$$($${GOPATH}/bin/govendor list +u)" && /bin/false)
 
 ineffassign interfacer golint goimports varcheck structcheck aligncheck deadcode gotype errcheck gocyclo dupl:
@@ -154,14 +167,14 @@ lint: gometalinter
 # dependency package need for building the project
 builddep:
 	go get github.com/golang/protobuf/proto
-	go get github.com/golang/protobuf/protoc-gen-go
-	go get github.com/jteeuwen/go-bindata/...
+	GOARCH=$(GOHOSTARCH) go get github.com/golang/protobuf/protoc-gen-go
+	GOARCH=$(GOHOSTARCH) go get github.com/jteeuwen/go-bindata/...
 
 genlocalfiles: .proto .bindata
 
 clean: test.functionals.cleanup dpdk.cleanup
-	grep path vendor/vendor.json | perl -pe 's|.*": "(.*?)".*|\1|g' | xargs -n 1 go clean -i >/dev/null 2>&1 || true
-	$(MAKE) -C contrib/snort clean
+	(cd $(OPENWRT_BUILD_PATH) && grep path vendor/vendor.json | perl -pe 's|.*": "(.*?)".*|\1|g' | xargs -n 1 go clean -i >/dev/null 2>&1 || true)
+	$(MAKE) -C $(OPENWRT_BUILD_PATH)/contrib/snort clean
 
 
 doc:
